#!/usr/bin/env node
var program = require('commander');
var allowed = ['1day', '7day', '30day', '90day', '180day', '365day', 'all'];
var allowedTypes = ['price', 'volume', 'market_cap'];

var blessed = require('blessed')
  , contrib = require('blessed-contrib')
  , screen = blessed.screen();


program
  .description('Charts')
  .command('charts', 'charts history')
  .usage('[options] <SYMBOL>')
  .option('-t, --timeframe [1day]', 'Choose a time frame ['+allowed.join(',')+']', '1day')
  .option('--type [price]', 'Choose the data type ['+allowedTypes.join(',')+']', 'price');

var cli = require('../cli')(program);

// print help with no args
if (program.args.length < 1 || program.args[0] == '') {
   program.help();
}

var symbol = program.args[0];

function arrayContains(needle, arrhaystack)
{
  return (arrhaystack.indexOf(needle) > -1);
}

if (!arrayContains(program.timeframe, allowed)) {
  console.error('unknown timeframe');
  process.exit(1);
}

if (!arrayContains(program.type, allowedTypes)) {
  console.error('unknown type');
  process.exit(1);
}

var config = {
  color: 'green',
  width: process.stdout.columns || 80,
  height: 20,
  yFractions: 1
};


function displayChart(result) {
  var data = result[program.type];
  var caption = config.caption = program.args[0] + ' ' + program.type;

  var indexes = data.map(function(item, index) {
    return index
  });

  var items = data.map(function(item, index) {
    return item[1]
  });

  let min = items.reduce(function(a, b, i, arr) {return Math.min(a,b)})
  let max = items.reduce(function(a, b, i, arr) {return Math.max(a,b)})

  var line = contrib.line({
    style: {
      line: "yellow",
      text: "green",
      baseline: "black"
    },
    minY: min,
    wholeNumbersOnly: false,
    showLegend: true,
    label: config.caption + ' ' + program.timeframe
  });

  var title = `${Math.round(min)}/${Math.round(max)}`

  var data = {
   title: title,
   x: indexes,
   y: items
  };
  screen.append(line) //must append before setting data
  line.setData([data])
  screen.key(['escape', 'q', 'C-c'], function(ch, key) {
    return process.exit(0);
  });
  screen.render()
}

cli
  .commands
  .history(program.args[0], program.timeframe)
  .then(displayChart)
  .catch(console.error)
